<?php

/**
 * @file
 * Emailservice module functionality.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Form\FormStateInterface;
use Drupal\emailservice\PeytzmailConnect;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function emailservice_theme($existing, $type, $theme, $path) {
  return [
    'subscription_manager' => [
      'template' => 'subscription-manager',
      'variables' => [
        'node' => NULL,
        'user_email' => NULL,
        'params' => NULL,
        'subscriber_info' => NULL,
        'form' => [],
      ],
    ],
    'emailservice_status_messages' => [
      'template' => 'emailservice-status-messages',
      'variables' => ['status_headings' => [], 'message_list' => NULL],
    ],
    'emailservice_subscription_form' => [
      'template' => 'emailservice-form',
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function emailservice_preprocess_subscription_manager(&$variables) {
  if (!empty($variables['node'])) {
    $node = $variables['node'];

    // Process logo output.
    $logo_array = $node->get('field_logo')->target_id;
    $file = \Drupal\file\Entity\File::load($logo_array);
    $logo = [
      '#theme' => 'image_style',
      '#style_name' => 'medium',
      '#uri' => $file->getFileUri(),
    ];

    $variables['logo'] = $logo;

    // Process intro text output.
    $intro = $node->get('field_intro_text')->value;
    $variables['intro'] = $intro;

    // Processing types/categories fields values.
    $fields = ['categories'=>'field_types_categories'];

    foreach ($fields as $name => $field) {
      $getfield = $node->get($field)->getValue();

      $options = [];
      foreach ($getfield as $key => $item) {
        $options[$item['machine_name']] = $item['label'];
      }

      $variables[$name] = $options;
    }

    // Subscribe/Update button label handling.
    $variables['btn_left_label'] = t('Subscribe');

    if (!empty($variables['subscriber_info'])) {
      $variables['btn_left_label'] = t('Update my preferences');
    }

    $variables['headline_color'] = $node->get('field_headline_color')->color;

    $messages = \Drupal\Core\Render\Element\StatusMessages::renderMessages();
    if (!empty($messages)) {
      $messages['#theme'] = 'emailservice_status_messages';
      $variables['messages'] = \Drupal::service('renderer')->render($messages);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function emailservice_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'taxonomy_term_types_materials_form' ) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'delete' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions']['submit']['#submit'][] = 'emailservice_type_terms_send';
      }
    }
  }
}

function emailservice_type_terms_send(&$form, FormStateInterface $formState) {
  $connect = new PeytzmailConnect();
  $remote_field_data = $connect->getSubscriberFieldsData('new_arrivals_types');

  if (!empty($remote_field_data)) {
    $selection_list  = $remote_field_data->subscriber_field->selection_list;

    $term_value = $formState->getValue('name')[0]['value'];
    $term_key = preg_replace('@[^a-z0-9-]+@', '-', strtolower($term_value));

    $term_update = new stdClass();
    $term_update->key = $term_key;
    $term_update->value = $term_value;

    $selection_list[] = $term_update;

    $data = [
      'new_arrivals_types' => [
        'selection_list' => $selection_list,
      ],
    ];

    $connect->setSubscriberFieldsData($data);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function emailservice_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'frontpage') {
    $current_user = \Drupal::currentUser();
    $user_roles = $current_user->getRoles();

    $query->addWhere('1', 'node_field_data.type', 'subscription');

    if (!in_array('administrator', $user_roles)) {
      $query->addWhere('1', 'node_field_data.uid', $current_user->id());
    }
  }
}

/**
 * Implements hook_node_access().
 */
function emailservice_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  switch ($op) {
    case 'view':
    case 'update':
      return AccessResult::allowedIf($node->getOwnerId() == $account->id());
      break;

    case 'create':
    case 'delete':
      $access = new AccessResultForbidden();
      $access->addCacheableDependency($node);
      return $access;
      break;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function emailservice_entity_type_alter(array &$entity_types) {
  $handlers = $entity_types['node']->get('handlers');
  $handlers['form']['edit'] = 'Drupal\emailservice\Form\SubscriptionNodeForm';
  $entity_types['node']->set('handlers', $handlers);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function emailservice_preprocess_fieldset(&$variables) {
  $element = $variables['element'];

  if (isset($element['#description_display'])) {
    if ($element['#description_display'] == 'before') {
      $variables['description_before'] = TRUE;
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function emailservice_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'emailservice');
  $theme_registry['fieldset']['path'] = $path . '/templates';
}
